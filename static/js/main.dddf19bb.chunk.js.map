{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","item","type","name","onClick","prototype","PropTypes","shape","string","isRequired","func","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","currentTarget","console","log","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAyBeA,MAvBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,sCAASC,KACT,yCAAYC,KACZ,oDAEGC,EAFH,W,gBCPN,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,6BACGC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAI,OAC5B,6BACE,wBAAQC,KAAK,SAASC,KAAMF,EAAMG,QAASP,EAA3C,SACGI,KAFIA,QAUjBN,EAAgBU,UAAY,CAC1BT,QAASU,IAAUC,MAAM,CACvBjB,KAAMgB,IAAUE,OAChBjB,QAASe,IAAUE,OACnBhB,IAAKc,IAAUE,SACdC,WACHZ,gBAAiBS,IAAUI,KAAKD,YAGnBd,QCZAgB,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCHL,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,IAGbD,EAAaT,UAAY,CACvBU,QAAST,IAAUE,OAAOC,YAGbK,QCJA,SAASE,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrB3B,EADqB,KACf4B,EADe,OAEED,mBAAS,GAFX,mBAErB1B,EAFqB,KAEZ4B,EAFY,OAGNF,mBAAS,GAHH,mBAGrBzB,EAHqB,KAGhB4B,EAHgB,KA0BtBC,EAAqB,WACzB,OAAO/B,EAAOC,EAAUC,GAU1B,OACE,qCACE,cAAC,EAAD,CAASoB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEhB,QAAS,CAAEN,OAAMC,UAASC,OAC1BK,gBArCY,SAAAyB,GAElB,OADaA,EAAEC,cAAcpB,MAE3B,IAAK,OACHe,GAAQ,kBAAM5B,EAAO,KACrB,MAEF,IAAK,UACH6B,GAAW,kBAAM5B,EAAU,KAC3B,MAEF,IAAK,MACH6B,GAAO,kBAAM5B,EAAM,KACnB,MAEF,QACEgC,QAAQC,IAAI,eAwBd,cAAC,EAAD,CAASb,MAAM,aAAf,SAC4B,IAAzBS,IACC,cAAC,EAAD,CAAcN,QAAQ,sBAEtB,cAAC,EAAD,CACEzB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO4B,IACP3B,mBAvBFJ,EAAO+B,IAGNK,KAAKC,MAAc,IAAPrC,EAAc+B,KAFxB,SCjCbO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACd,EAAD,MAEFe,SAASC,eAAe,W","file":"static/js/main.dddf19bb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <ul>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad:{bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>\r\n        Positive feedback:\r\n        {positivePercentage}%\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <ul>\r\n      {Object.keys(options).map(item => (\r\n        <li key={item}>\r\n          <button type=\"button\" name={item} onClick={onLeaveFeedback}>\r\n            {item}\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nFeedbackOptions.prototype = {\r\n  options: PropTypes.shape({\r\n    good: PropTypes.string,\r\n    neutral: PropTypes.string,\r\n    bad: PropTypes.string,\r\n  }).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotification.prototype = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import { useState } from 'react';\nimport Statistics from './components/Statistics/Statistics.js';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions.js';\nimport Section from './components/Section/Section.js';\nimport Notification from './components/Notification/Notification.js';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const updateState = e => {\n    const name = e.currentTarget.name;\n    switch (name) {\n      case 'good':\n        setGood(() => good + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(() => neutral + 1);\n        break;\n\n      case 'bad':\n        setBad(() => bad + 1);\n        break;\n\n      default:\n        console.log('error');\n        break;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    if (!(good / countTotalFeedback())) {\n      return 0;\n    }\n    return Math.round((good * 100) / countTotalFeedback());\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={{ good, neutral, bad }}\n          onLeaveFeedback={updateState}\n        ></FeedbackOptions>\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\"></Notification>\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          ></Statistics>\n        )}\n      </Section>\n    </>\n  );\n}\n\n// class AppOld extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   countTotalFeedback() {\n//     return Object.values(state).reduce((a, b) => a + b, 0);\n//   }\n\n//   countPositiveFeedbackPercentage() {\n//     if (!(state.good / countTotalFeedback())) {\n//       return 0;\n//     }\n//     return Math.round((state.good * 100) / countTotalFeedback());\n//   }\n\n//   render() {\n//     const { good, neutral, bad } = state;\n//     return (\n//       <div>\n// <Section title=\"Please leave feedback\">\n//   <FeedbackOptions\n//     options={state}\n//     onLeaveFeedback={updateState}\n//   ></FeedbackOptions>\n// </Section>\n\n// <Section title=\"Statistics\">\n//   {countTotalFeedback() === 0 ? (\n//     <Notification message=\"No feedback given\"></Notification>\n//   ) : (\n//     <Statistics\n//       good={good}\n//       neutral={neutral}\n//       bad={bad}\n//       total={countTotalFeedback()}\n//       positivePercentage={countPositiveFeedbackPercentage()}\n//     ></Statistics>\n//   )}\n// </Section>\n//       </div>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}